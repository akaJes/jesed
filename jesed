#!/usr/bin/env node
const crypto = require('crypto');
const fs = require('fs');
const path = require('path');

const yargs = require('yargs');
const opn = require('open');
const prompt = require('prompt');
const chokidar = require('chokidar');

const {promisify, walk, getAllFiles, arrRemove} = require('./app/helpers');
const server = require('./app/server');

const md5 = data => crypto.createHash('md5').update(data).digest("hex");

const config = {};

const getPass = () =>
  promisify(fs.readFile)('.htdigest')
//  .catch(e => '')
  .then(text => text.toString().split(/\r\n?|\n/).filter(a => a).map(i => i.split(':')))

const setProjects = (obj) => promisify(fs.writeFile)('projects.json', JSON.stringify(obj, null, 2)).then(a => obj);

const getProjects = (name) =>
  promisify(fs.readFile)(name || 'projects.json')
  .catch(e => promisify(fs.readFile)('projects.json.dist').then(setProjects))
  .then(text => JSON.parse(text.toString()))


const setPass = (pass) =>
  Promise.resolve(pass.map(i => i.join(':')).join('\n'))
  .then(text => promisify(fs.writeFile)('.htdigest', text))

const promptPass = argv => new Promise((resolve, reject) => {
    prompt.start();
    const schema = {
      properties: {
        name: {
          pattern: /^[a-zA-Z\s\-]+$/,
          message: 'Name must be only letters, spaces, or dashes',
          required: true,
        },
        password: {
          hidden: true,
          replace: '*',
        }
      }
    };
    argv && argv.name && delete schema.properties.name;
    return promisify(prompt.get)(schema)
    .then(result => {
      const pwd = (a, pass) => { a[2] = pass; a[2] = md5(a.join(':')); return a; };
      const name = argv && argv.name || result.name;
      getPass().catch(e => [])
      .then(p =>
        p.filter(i => i[0] == name).length
        && p.map(i => i[0] == name && pwd(i, result.password) || i)
        || (p.push(pwd([name, 'Users', ''], result.password)), p)
      )
      .then(setPass)
      .then(a => console.log('password set'))
      .then(resolve)
    });
})

const args = () => yargs
  .command(['serve [mode]', 's'], 'start the server', (yargs) => {
    yargs
      .positional('mode', {
        describe: 'local or apache',
        default: 'local'
      })
  }, (argv) => {
    if (argv.verbose) console.info(`start server ${argv.mode}`)
    serve(argv.mode)
  })
  .command(['projects', 'p'], 'list available projects', {}, (argv) => {
    getProjects().then(i => i.map(a => console.log(a)))
  })
  .command(['users'], 'list available users', {}, (argv) => {
    getPass().then(i => i.map(a => console.log(a[0])))
  })
  .command(['user [mode] [name]'], 'set or remove allowed users', (yargs) => {
    yargs
      .positional('mode', {
        describe: 'set or remove',
        default: 'set'
      })
  }, (argv) => {
    if (argv.mode == 'remove') {
      return getPass()
      .then(p => p.filter(i => i[0] != argv.name))
      .then(setPass)
      .then(a => console.log('password removed'));
    }
    promptPass(argv);
  })
  .option('verbose', {
    alias: 'v',
    default: false
  })
  .command(['$0'], 'the serve command', () => {}, (argv) => {
    serve('local');
  })
  .showHelpOnFail(true)
  .demandCommand(1, '')
  .argv

//create new project file
promisify(fs.stat)('projects.json')
.catch(e => getProjects(path.join(__dirname, 'projects.json.dist')).then(setProjects))
.then(args);

function watch() {
  chokidar.watch('.htdigest', {
    persistent: true,
  })
  .on('change', file => {
     getPass()
    .then(list => config.pass = list.reduce((p, i) => (p[i[0]] = i[2], p) , {}));
  })

  chokidar.watch('projects.json', {
    persistent: true,
  })
  .on('change', file => {
    const diff = (a, b) => a.filter(i => !b.find(j => j.id == i.id))
    getProjects()
    .then(now => {
      //remove
      arrRemove(config.projects, p => {
        if (!now.find(i => p.id == i.id))
          return server.removeProject(p), true;
      })
      //add
      diff(now, config.projects).map(p => {
        config.projects.push(p)
        server.addProject(p)
      });
      //update
      config.projects.map(p => {
        var n = now.find(i => p.id == i.id)
        n && Object.assign(p, n);
      })
    })
  })
}
function serve(mode) {
  Promise.all([
    getPass(),
    getProjects(),
    require('./package.json'),
  ])
  .then(files => {
    Object.assign(config, files[2].config[mode])
    config.pass = files[0].reduce((p, i) => (p[i[0]] = i[2], p) , {});
    config.projects = files[1];
    server.init(config);
    watch();
    if (mode == 'local') {
      console.log('open in browser url http://localhost:' + config.port);
      try {
        opn('http://localhost:' + config.port);
      } catch(e) {};
    }
  })
  .catch(e => {
    console.error('missing config', e)
    console.error('type `jesed user add` to add user at next time')
    promptPass()
    .then(a => serve(mode))
    .catch(e => process.exit());
  })
}

process.on('unhandledRejection', (reason, p) => {
  console.error('Unhandled Rejection at: Promise', p, 'reason:', reason);
  // application specific logging, throwing an error, or other logic here
});

if(0)
process.on('SIGINT', function() {
  console.log('Graceful closing...');
  server.close(function() {
    process.exit(0);
  });
});

